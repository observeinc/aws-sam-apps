---
AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: 'Subscribe logs to S3.'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: observe-logwriter
    Description: Write CloudWatch Logs to S3, optionally subscribing log groups.
    Author: Observe Inc
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/observeinc/aws-sam-apps
    SemanticVersion: '0.0.1'
    SourceCodeUrl: https://github.com/observeinc/aws-sam-apps

Globals:
  Function:
    Timeout: 120
    MemorySize: 128

Parameters:
  BucketARN:
    Type: String
    Description: >-
      S3 Bucket ARN to write log records to.
  Prefix:
    Type: String
    Description: >-
      Optional prefix to write log records to.
    Default: ''
  LogGroupNamePatterns:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of patterns.
      We will only subscribe to log groups that have names matching one of the
      provided strings based on strings based on a case-sensitive substring
      search. To subscribe to all log groups, use the wildcard operator *.
    Default: ''
  LogGroupNamePrefixes:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of prefixes. The lambda function will only apply to
      log groups that start with a provided string. To subscribe to all log
      groups, use the wildcard operator *.
    Default: ''
  FilterName:
    Type: String
    Description: >-
      Subscription filter name. Existing filters that have this name as a prefix will be removed.
    Default: ''
  FilterPattern:
    Type: String
    Description: >-
      Subscription filter pattern.
    Default: ''
  BufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: |
      Buffer incoming data for the specified period of time, in seconds, before
      delivering it to S3.
  BufferingSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 64
    Description: |
      Buffer incoming data to the specified size, in MiBs, before delivering it
      to S3.
  NumWorkers:
    Type: String
    Description: Maximum number of concurrent workers when processing log groups.
    Default: ''
    AllowedPattern: '^[0-9]*$'
  DiscoveryRate:
    Type: String
    Description: EventBridge rate expression for periodically triggering
      discovery. If not set, no eventbridge rules are configured.
    Default: ''
    AllowedPattern: '^([1-9]\d* (minute|hour|day)s?)?$'
  NameOverride:
    Type: String
    Description: >-
      Name of Lambda function.
    Default: ''
    MaxLength: 64

Conditions:
  SetDefaultFilterName: !Equals
    - !Ref FilterName
    - ''
  UseStackName: !Equals
    - !Ref NameOverride
    - ''
  HasLogGroupNamePatterns: !Not
    - !Equals
      - !Join
        - ','
        - !Ref LogGroupNamePatterns
      - ''
  HasLogGroupNamePrefixes: !Not
    - !Equals
      - !Join
        - ','
        - !Ref LogGroupNamePrefixes
      - ''
  EnableSubscription: !Or
    - !Condition HasLogGroupNamePatterns
    - !Condition HasLogGroupNamePrefixes
  HasDiscoveryRate: !And
    - !Condition EnableSubscription
    - !Not
      - !Equals
        - !Ref DiscoveryRate
        - ''
Resources:
  FirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt FirehoseLogGroup.Arn
        - PolicyName: s3writer
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Ref BucketARN
                  - !Sub '${BucketARN}/${Prefix}*'
  FirehoseLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/firehose/
          - !If
            - UseStackName
            - !Ref AWS::StackName
            - !Ref NameOverride
      RetentionInDays: 365
  FirehoseLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogStreamName: s3logs
      LogGroupName: !Ref FirehoseLogGroup
  DeliveryStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !If
        - UseStackName
        - !Ref AWS::StackName
        - !Ref NameOverride
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !Ref BucketARN
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: !Ref Prefix
        ErrorOutputPrefix: !Ref Prefix
        BufferingHints:
          IntervalInSeconds: !Ref BufferingInterval
          SizeInMBs: !Ref BufferingSize
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLogGroup
          LogStreamName: !Ref FirehoseLogStream
  DestinationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: firehose
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:ListDeliveryStreams
                  - firehose:ListTagsForDeliveryStream
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: !GetAtt 'DeliveryStream.Arn'
  DeadLetter:
    Type: AWS::SQS::Queue
    Condition: EnableSubscription
    Properties:
      QueueName: !Sub
        - '${Name}-deadletter'
        - Name: !If
            - UseStackName
            - !Ref AWS::StackName
            - !Ref NameOverride
  Queue:
    Type: AWS::SQS::Queue
    Condition: EnableSubscription
    Properties:
      QueueName: !If
        - UseStackName
        - !Ref AWS::StackName
        - !Ref NameOverride
      DelaySeconds: 0
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetter.Arn
        maxReceiveCount: 4
      VisibilityTimeout: 120
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: EnableSubscription
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Principal:
              Service: events.amazonaws.com
      Queues:
        - !Ref Queue
  SubscriberRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableSubscription
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt SubscriberLogGroup.Arn
        - PolicyName: pass
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt DestinationRole.Arn
        - PolicyName: queue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt Queue.Arn
        - PolicyName: subscription
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeSubscriptionFilters
                  - logs:DeleteSubscriptionFilter
                  - logs:PutSubscriptionFilter
                Resource: "*"
  SubscriberLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: EnableSubscription
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !If
            - UseStackName
            - !Ref AWS::StackName
            - !Ref NameOverride
      RetentionInDays: 365
  Subscriber:
    Type: AWS::Serverless::Function
    Condition: EnableSubscription
    Metadata:
      BuildMethod: makefile
    DependsOn:
      - QueuePolicy
      - SubscriberLogGroup
    Properties:
      FunctionName: !If
        - UseStackName
        - !Ref AWS::StackName
        - !Ref NameOverride
      Role: !GetAtt SubscriberRole.Arn
      CodeUri: ../..
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        Items:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue: !GetAtt Queue.Arn
            ScalingConfig:
              MaximumConcurrency: 2
      Environment:
        Variables:
          FILTER_NAME: !If
           - SetDefaultFilterName
           - 'observe-logs-subscription'
           - !Ref FilterName
          FILTER_PATTERN: !Ref FilterPattern
          DESTINATION_ARN: !GetAtt DeliveryStream.Arn
          LOG_GROUP_NAME_PREFIXES: !Join
            - ','
            - !Ref LogGroupNamePrefixes
          LOG_GROUP_NAME_PATTERNS: !Join
            - ','
            - !Ref LogGroupNamePatterns
          ROLE_ARN: !GetAtt DestinationRole.Arn
          QUEUE_URL: !Ref Queue
          VERBOSITY: 9
          NUM_WORKERS: !Ref NumWorkers
  SubscriptionEvents:
    Type: AWS::Events::Rule
    Condition: HasDiscoveryRate
    DependsOn: Subscriber
    Properties:
      Description: "Subscribe new log groups"
      State: ENABLED
      EventPattern:
        source:
          - "aws.logs"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "logs.amazonaws.com"
          eventName:
            - "CreateLogGroup"
      Targets:
        - Arn: !GetAtt Queue.Arn
          Id: SubscriptionEvent
          InputTransformer:
            InputPathsMap:
              logGroupName: "$.detail.requestParameters.logGroupName"
            InputTemplate: >-
              {"subscribe": {"logGroups": [{ "logGroupName": "<logGroupName>"}]}}
  SchedulerRole:
    Type: 'AWS::IAM::Role'
    Condition: HasDiscoveryRate
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: queue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt Queue.Arn
  DiscoverySchedule:
    Type: 'AWS::Scheduler::Schedule'
    Condition: HasDiscoveryRate
    Properties:
      Description: Trigger log group discovery
      ScheduleExpression: !Sub 'rate(${DiscoveryRate})'
      State: ENABLED
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt Queue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: !ToJsonString
          discover:
            logGroupNamePatterns: !If
              - HasLogGroupNamePatterns
              - !Ref LogGroupNamePatterns
              - []
            logGroupNamePrefixes: !If
              - HasLogGroupNamePrefixes
              - !Ref LogGroupNamePrefixes
              - []
Outputs:
  Function:
    Description: "Lambda Function ARN"
    Condition: EnableSubscription
    Value: !GetAtt Subscriber.Arn
  Firehose:
    Description: "Kinesis Firehose Delivery Stream ARN"
    Value: !GetAtt DeliveryStream.Arn
