---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Collect AWS data towards Observe.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: observe-aws-collection
    Description: Collect resource, logs and metrics data from AWS
    Author: Observe Inc
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/observeinc/aws-sam-testing
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/observeinc/aws-sam-testing

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Required parameters
        Parameters:
          - DataAccessPointArn
          - DestinationUri
      - Label:
          default: Resources
        Parameters:
          - InstallConfig
      - Label:
          default: Logs
        Parameters:
          - LogGroupNamePatterns
          - LogGroupNamePrefixes
      - Label:
          default: Forwarder Options
        Parameters:
          - SourceBucketNames
          - SourceTopicArns
          - NameOverride

Parameters:
  DataAccessPointArn:
    Type: String
    Description: >-
      The access point ARN for your Filedrop.
  DestinationUri:
    Type: String
    Description: >-
      The S3 URI for your Filedrop, e.g.  `s3://bucket-alias/ds101/`
  SourceBucketNames:
    Type: CommaDelimitedList
    Description: >-
      A list of bucket names which the forwarder is allowed to read from.
    Default: ""
  SourceTopicArns:
    Type: CommaDelimitedList
    Description: >-
      A list of SNS topics the forwarder is allowed to be subscribed to.
    Default: ""
  NameOverride:
    Type: String
    Description: >-
      Name of IAM role expected by Filedrop. This role will be created as part
      of this stack, and must therefore be unique within the account.
    Default: ""
  InstallConfig:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: >-
      Set to `true` to install AWS Config. AWS Config can only be configured
      once per region. If you already have an existing AWS Config Recorder
      installed, set this value to `false` and subscribe the S3 bucket
      containing the configuration snapshots.
  LogGroupNamePatterns:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of patterns. If not empty, the lambda function will
      only apply to log groups that have names that match one of the provided
      strings based on a case-sensitive substring search.
    Default: ''
  LogGroupNamePrefixes:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of prefixes. If not empty, the lambda function will
      only apply to log groups that start with a provided string.
    Default: ''

Conditions:
  EnableConfig: !Equals
    - !Ref InstallConfig
    - "true"
  EnableSubscriber: !Not
    - !And
      - !Equals
        - !Join [",", !Ref LogGroupNamePatterns]
        - ""
      - !Equals
        - !Join [",", !Ref LogGroupNamePrefixes]
        - ""
  UseStackName: !Equals
    - !Ref NameOverride
    - ""
  EmptySourceBucketNames: !Equals
    - !Join [",", !Ref SourceBucketNames]
    - ""
  EmptySourceTopicArns: !Equals
    - !Join [",", !Ref SourceTopicArns]
    - ""

Resources:
  Topic:
    Type: "AWS::SNS::Topic"
  TopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Config"
            Effect: "Allow"
            Principal:
              Service:
                - "config.amazonaws.com"
            Action:
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:ListSubscriptionsByTopic"
            Resource:
              - !Ref Topic
          - Sid: "S3"
            Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
            Action:
              - "sns:Publish"
            Resource:
              - !Ref Topic
          - Sid: "Cloudformation"
            Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sns:Publish"
            Resource:
              - !Ref Topic
      Topics:
        - !Ref Topic
  Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    DependsOn: TopicPolicy
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: !Ref Topic
  Forwarder:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../forwarder/template.yaml
      NotificationARNs:
        - !Ref Topic
      Parameters:
        DataAccessPointArn: !Ref DataAccessPointArn
        DestinationUri: !Ref DestinationUri
        SourceBucketNames: 
          !If
            - EmptySourceBucketNames
            - !Sub "${Bucket}"
            - !Join 
                - ","
                - - !Ref Bucket
                  - !Join [",", !Ref SourceBucketNames]
        SourceTopicArns:
          !If
            - EmptySourceTopicArns
            - !Sub "${Topic}"
            - !Join 
                - ","
                - - !Ref Topic
                  - !Join [",", !Ref SourceTopicArns]
        NameOverride: !If
          - UseStackName
          - !Ref 'AWS::StackName'
          - !Ref NameOverride
  TopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt
        - Forwarder
        - Outputs.Queue
      Protocol: sqs
      TopicArn: !Ref Topic
  Config:
    Type: AWS::Serverless::Application
    DependsOn: Forwarder
    Condition: EnableConfig
    Properties:
      Location: ../config/template.yaml
      NotificationARNs:
        - !Ref Topic
      Parameters:
        BucketName: !Ref Bucket
        TopicARN: !Ref Topic
  Firehose:
    Type: AWS::Serverless::Application
    Condition: EnableSubscriber
    Properties:
      Location: ../firehose/template.yaml
      NotificationARNs:
        - !Ref Topic
      Parameters:
        BucketARN: !GetAtt Bucket.Arn
        Prefix: "cloudwatchlogs/"
        WriterRoleService: "logs.amazonaws.com"
        NameOverride: !Ref NameOverride
  Subscriber:
    Type: AWS::Serverless::Application
    Condition: EnableSubscriber
    Properties:
      Location: ../subscriber/template.yaml
      NotificationARNs:
        - !Ref Topic
      Parameters:
        FilterName: 'observe-logs-subscription'
        DestinationArn: !GetAtt
          - Firehose
          - Outputs.Firehose
        RoleArn: !GetAtt
          - Firehose
          - Outputs.WriterRole
        LogGroupNamePrefixes: !Join [",", !Ref LogGroupNamePrefixes]
        LogGroupNamePatterns: !Join [",", !Ref LogGroupNamePatterns]
        NameOverride: !Ref NameOverride
Outputs:
  Bucket:
    Description: "S3 Bucket Name"
    Value: !Ref Bucket
  BucketARN:
    Description: "S3 Bucket ARN"
    Value: !GetAtt Bucket.Arn
  Topic:
    Description: "SNS Topic ARN"
    Value: !Ref Topic
