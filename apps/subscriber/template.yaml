---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Subscribe logs to Observe.'
Metadata:
  AWS::ServerlessRepo::Application:
    Name: observe-subscriber
    Description: Subscribe logs to Observe.
    Author: Observe Inc
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/observeinc/aws-sam-testing
    SemanticVersion: '0.0.1'
    SourceCodeUrl: https://github.com/observeinc/aws-sam-testing

Globals:
  Function:
    Timeout: 20
    MemorySize: 128

Parameters:
  FilterName:
    Type: String
    Description: >-
      Subscription filter name. Existing filters that have this name as a prefix will be removed.
    Default: ''
  FilterPattern:
    Type: String
    Description: >-
      Subscription filter pattern.
    Default: ''
  DestinationArn:
    Type: String
    Description: >-
      Destination ARN for subscription filter. If empty, any matching
      subscription filter named `FILTER_NAME` will be removed.
    Default: ''
  RoleArn:
    Type: String
    Description: >-
      Role ARN. Can only be set if DestinationArn is also set.
    Default: ''
  LogGroupNamePatterns:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of patterns. 
      We will only subscribe to log groups that have names matching one of the
      provided strings based on strings based on a case-sensitive substring
      search. To subscribe to all log groups, use the wildcard operator *. 
    Default: '*'
  LogGroupNamePrefixes:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of prefixes. The lambda function will only apply to
      log groups that start with a provided string. To subscribe to all log
      groups, use the wildcard operator *.
    Default: ''
  NumWorkers:
    Type: String
    Description: Maximum number of concurrent workers when processing log groups.
    Default: ''
    AllowedPattern: '^[0-9]*$'
  NameOverride:
    Type: String
    Description: >-
      Name of Lambda function.
    Default: ''

Conditions:
  SetDefaultFilterName: !Equals
    - !Ref FilterName
    - ''
  UseStackName: !Equals
    - !Ref NameOverride
    - ''

Resources:
  DeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub
        - '${Name}-deadletter'
        - Name: !If
            - UseStackName
            - !Ref AWS::StackName
            - !Ref NameOverride
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If
        - UseStackName
        - !Ref AWS::StackName
        - !Ref NameOverride
      DelaySeconds: 0
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetter.Arn
        maxReceiveCount: 4
      VisibilityTimeout: 20
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Principal:
              Service: events.amazonaws.com
      Queues:
        - !Ref Queue
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LogGroup.Arn
        - PolicyName: queue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt Queue.Arn
        - PolicyName: subscription
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeSubscriptionFilters
                  - logs:DeleteSubscriptionFilter
                  - logs:PutSubscriptionFilter
                Resource: "*"
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !If
            - UseStackName
            - !Ref AWS::StackName
            - !Ref NameOverride
      RetentionInDays: 365
  Subscriber:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    DependsOn: LogGroup
    Properties:
      FunctionName: !If
        - UseStackName
        - !Ref AWS::StackName
        - !Ref NameOverride
      Role: !GetAtt Role.Arn
      CodeUri: ../..
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        Items:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
            Enabled: true
      Environment:
        Variables:
          FILTER_NAME: !If
           - SetDefaultFilterName
           - 'observe-logs-subscription'
           - !Ref FilterName
          FILTER_PATTERN: !Ref FilterPattern
          DESTINATION_ARN: !Ref DestinationArn
          LOG_GROUP_NAME_PREFIXES: !Join
            - ','
            - !Ref LogGroupNamePrefixes
          LOG_GROUP_NAME_PATTERNS: !Join
            - ','
            - !Ref LogGroupNamePatterns
          ROLE_ARN: !Ref RoleArn
          QUEUE_URL: !Ref Queue
          VERBOSITY: 9
          NUM_WORKERS: !Ref NumWorkers
Outputs:
  Function:
    Description: "Lambda Function ARN"
    Value: !GetAtt Subscriber.Arn
  LogGroupName:
    Description: "Log Group Name"
    Value: !Ref LogGroup
